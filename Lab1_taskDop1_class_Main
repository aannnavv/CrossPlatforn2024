import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Scanner;


public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Виведення списку конструкторів
        Constructor<?>[] constructors = MyClass.class.getConstructors();
        System.out.println("Список конструкторів:");
        for (int i = 0; i < constructors.length; i++) {
            System.out.println(i + ": " + constructors[i]);
        }

        // Вибір конструктора
        System.out.print("Виберіть номер конструктора: ");
        int constructorIndex = scanner.nextInt();

        // Створення об'єкта з обраного конструктора
        MyClass object = null;
        try {
            object = (MyClass) constructors[constructorIndex].newInstance();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Виведення стану об'єкта
        displayObjectState(object);

        // Виведення списку методів
        Method[] methods = MyClass.class.getDeclaredMethods();
        System.out.println("Список методів:");
        for (int i = 0; i < methods.length; i++) {
            System.out.println(i + ": " + methods[i]);
        }

        // Вибір метода
        System.out.print("Виберіть номер метода: ");
        int methodIndex = scanner.nextInt();

        // Виклик обраного метода
        try {
            methods[methodIndex].invoke(object);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Виведення стану об'єкта після виклику метода
        displayObjectState(object);
    }

    // Метод для виведення стану об'єкта
    private static void displayObjectState(Object object) {
        System.out.println("Стан об'єкта:");
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            try {
                field.setAccessible(true);
                System.out.println(field.getName() + ": " + field.get(object));
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
    }
}
