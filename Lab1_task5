import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

interface Evaluatable {
    double eval(double x);
}

class Function1 implements Evaluatable {
    @Override
    public double eval(double x) {
        return Math.exp(-Math.abs(2.5) * x) * Math.sin(x);
    }
}

class Function2 implements Evaluatable {
    @Override
    public double eval(double x) {
        return x * x;
    }
}

class ProfilingHandler implements InvocationHandler {
    private final Object target;

    public ProfilingHandler(Object target) {
        this.target = target;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        long startTime = System.nanoTime();
        Object result = method.invoke(target, args);
        long endTime = System.nanoTime();

        System.out.println(method.getName() + " took " + (endTime - startTime) + " ns");
        return result;
    }
}

class TracingHandler implements InvocationHandler {
    private final Object target;

    public TracingHandler(Object target) {
        this.target = target;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(target.getClass().getSimpleName() + ": " + target);

        if (args != null) {
            for (int i = 0; i < args.length; i++) {
                System.out.println("arg" + (i + 1) + ": " + args[i]);
            }
        }

        Object result = method.invoke(target, args);

        System.out.println(method.getName() + "(" + argsToString(args) + ") = " + result);

        return result;
    }

    private String argsToString(Object[] args) {
        if (args == null || args.length == 0) {
            return "";
        }

        StringBuilder builder = new StringBuilder();
        for (Object arg : args) {
            builder.append(arg).append(", ");
        }
        return builder.substring(0, builder.length() - 2);
    }
}

public class ProxyExample {
    public static void main(String[] args) {
        Evaluatable function1 = new Function1();
        Evaluatable function2 = new Function2();

        Evaluatable profiledFunction1 = createProxy(function1, new ProfilingHandler(function1));
        Evaluatable tracedFunction2 = createProxy(function2, new TracingHandler(function2));

        System.out.println("F1: " + profiledFunction1.eval(0.0));
        System.out.println("F2: " + tracedFunction2.eval(1.0));
    }

    private static Evaluatable createProxy(Evaluatable target, InvocationHandler handler) {
        return (Evaluatable) Proxy.newProxyInstance(
                Evaluatable.class.getClassLoader(),
                new Class<?>[]{Evaluatable.class},
                handler);
    }
}
